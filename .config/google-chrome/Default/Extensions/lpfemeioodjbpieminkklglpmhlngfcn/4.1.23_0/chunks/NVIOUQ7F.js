import{e as o,f as l}from"./SKM5Z6ZR.js";import{a as c}from"./KSSOAXI3.js";var u=class extends l{constructor(e,r,t){if(arguments.length===1&&typeof e=="object"&&!("saveContext"in e)){let{memory:i,callbackManager:a,...n}=e;super({...n,callbacks:a??n.callbacks}),this.memory=i}else super({verbose:r,callbacks:t}),this.memory=e}serialize(){throw new Error("Method not implemented.")}async run(e,r){if(!(this.inputKeys.length<=1))throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);let i=this.inputKeys.length?{[this.inputKeys[0]]:e}:{},a=await this.call(i,r),n=Object.keys(a);if(n.length===1)return a[n[0]];throw new Error("return values have multiple keys, `run` only supported when one key currently")}async call(e,r){let t={...e};if(this.memory!=null){let s=await this.memory.loadMemoryVariables(e);for(let[h,m]of Object.entries(s))t[h]=m}let a=await(await o.configure(r,this.callbacks,{verbose:this.verbose}))?.handleChainStart({name:this._chainType()},t),n;try{n=await this._call(t,a)}catch(s){throw await a?.handleChainError(s),s}return this.memory!=null&&await this.memory.saveContext(e,n),await a?.handleChainEnd(n),Object.defineProperty(n,c,{value:a?{runId:a?.runId}:void 0,configurable:!0}),n}async apply(e,r){return Promise.all(e.map(async(t,i)=>this.call(t,r?.[i])))}static async deserialize(e,r={}){switch(e._type){case"llm_chain":{let{LLMChain:t}=await import("./D7CYZAFO.js");return t.deserialize(e)}case"sequential_chain":{let{SequentialChain:t}=await import("./N6MHNSTC.js");return t.deserialize(e)}case"simple_sequential_chain":{let{SimpleSequentialChain:t}=await import("./N6MHNSTC.js");return t.deserialize(e)}case"stuff_documents_chain":{let{StuffDocumentsChain:t}=await import("./SLLKUHP5.js");return t.deserialize(e)}case"map_reduce_documents_chain":{let{MapReduceDocumentsChain:t}=await import("./SLLKUHP5.js");return t.deserialize(e)}case"refine_documents_chain":{let{RefineDocumentsChain:t}=await import("./SLLKUHP5.js");return t.deserialize(e)}case"vector_db_qa":{let{VectorDBQAChain:t}=await import("./HGSKFSI5.js");return t.deserialize(e,r)}default:throw new Error(`Invalid prompt type in config: ${e._type}`)}}};export{u as a};
